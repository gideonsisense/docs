<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Connecting to Facebook | Sisense | Documentation</title>
    </head>
    <body>
        <h1>Connecting to Facebook</h1>
        <p>The <MadCap:variable name="Variables.CompanyName" /> Facebook connector is a standalone connector that allows you to import data from various Facebook APIs into the <MadCap:variable name="Variables.ECM" /> without any custom queries. With just a few clicks, you can import tables directly from the Facebook API into your <MadCap:variable name="Variables.ECM" />.</p>
        <p><MadCap:variable name="Variables.CompanyName" /> supports two versions of the Facebook connector, the version described on this page and an earlier version described here. The difference between this version and the earlier version is that this version does not require custom SQL when importing tables, but does require <MadCap:variable name="Variables.CompanyName" />V6.6.1 or higher.</p>
        <p>After you have downloaded and installed the connector, you can connect to Facebook through a connection string you provide <MadCap:variable name="Variables.CompanyName" /> in the <MadCap:variable name="Variables.ECM" />. The connection string is used to authenticate users who connect to Facebook’s APIs.</p>
        <p>This page describes how to install the Facebook connector, how to connect to Facebook with a connection string, and what tables you can import into the <MadCap:variable name="Variables.ECM" />.</p>
        <ul>
            <li><a href="#Prerequi">Prerequisites</a>
            </li>
            <li><a href="#Installi">Installing the Facebook Connector</a>
            </li>
            <li><a href="#Adding">Adding Facebook Tables to your ElastiCube</a>
            </li>
            <li><a href="#Facebook">Facebook Tables</a>
            </li>
        </ul>
        <p class="bold">Breaking Changes for the Marketing API Version 2.8</p>
        <p>As of July 25, 2017, Facebook no longer supports their Marketing API version 2.8. Currently, all users whose Facebook app is v2.8 will receive an error. To overcome this issue, add the parameter ‘Version=2.10’ to the connection string.</p>
        <p>For more information about the latest version of the Marketing API, see Facebook’s <a href="https://developers.facebook.com/ads/blog/post/2017/07/18/marketing-api-2.10/">blog posts</a>.</p>
        <h2 class="notoc"><a name="Prerequi"></a>Prerequisites</h2>
        <p>The Facebook connector requires <MadCap:variable name="Variables.CompanyName" /> V6.6.1 and later.</p>
        <p>This connector is compatible with previous Facebook connectors. The following tables have been moved to the Facebook Ads connector: AdAccounts, AdCreatives, Ads, AdScheduledReports, AdSets, Campaigns, AdInsights, AdInsightsActions to continue to use these connectors in an existing <MadCap:variable name="Variables.ElastiCube" />, see <a href="#Changing">Changing Facebook Connectivity Settings</a>.</p>
        <h2 class="notoc"><a name="Installi"></a>Installing the Facebook Connector</h2>
        <p><MadCap:variable name="Variables.CompanyName" /> provides the Facebook connector as a standalone connector that you can download and add to your list of default <MadCap:variable name="Variables.CompanyName" /> connectors. After you install the Facebook connector, it is added to your list of Web Service connectors.</p>
        <p class="bold">To install the Facebook connector:</p>
        <ol>
            <li><a href="http://data.sisense.com/connectors/jvm/latest/release/Facebook.Connector.Installer.exe">Download</a> the Facebook installation file.</li>
            <li>Open the installation file and click <span class="bold">Install</span>.</li>
            <li>After the installation process is complete, click <span class="bold">Close</span>.</li>
        </ol>
        <p>The Facebook connector is displayed in the <MadCap:variable name="Variables.ECM" /> under <span class="bold">Add Data</span> &gt; <span class="bold">Web Services</span>.</p>
        <p>
            <img src="../../../Resources/Images/facebook1.png" class="thumblarge" />
        </p>
        <h2 class="notoc"><a name="Adding"></a>Adding Facebook Tables to your ElastiCube</h2>
        <p><MadCap:variable name="Variables.CompanyName" /> uses connection strings to connect to Facebook and import data into the <MadCap:variable name="Variables.ECM" />. The default connection string for Facebook is: jdbc:facebook:InitiateOAuth=GETANDREFRESH;</p>
        <p>After you connect using the default connection string, <MadCap:variable name="Variables.CompanyName" /> redirects you to Facebook’s Login page where you log in and your account is authenticated. Once the account is authenticated, the relevant tables can be added to your <MadCap:variable name="Variables.ElastiCube" />.</p>
        <p>If you want to customize your connection string, you can by creating a Facebook app and passing additional connection string parameters. For more information, see <a href="create-app-facebook.htm#Creating">Creating an App</a> at the end of this page.</p>
        <p>Once you have connected to the Facebook datasource, <MadCap:variable name="Variables.CompanyName" /> displays a list of Facebook tables you can import. For a list of supported tables, see <a href="#Facebook">Facebook Tables</a>.</p>
        <p class="bold">To add Facebook data:</p>
        <ol>
            <li>In <MadCap:variable name="Variables.ECM" />, click <span class="bold">Add Data</span> and then, <span class="bold">Facebook</span>. The Connect to Facebook window is displayed.<br /><img src="../../../Resources/Images/facebook2.png" class="thumblarge" /></li>
            <li>In <span class="bold">Datasource Connection String</span>, enter the connection string: <span class="code">jdbc:facebook:InitiateOAuth=GETANDREFRESH;</span></li>
            <li>Click <span class="bold">Connect to Server</span>. Facebook is displayed in the Select Database list.</li>
            <li>Click <span class="bold">OK</span>. Sisense connects to Facebook and displays a list of tables available for you to import. For a list of tables you can import, see <a href="#Facebook">Facebook Tables</a>.</li>
            <li>Select the relevant tables and click <span class="bold">Add</span>. The tables are displayed in the <MadCap:variable name="Variables.ECM" />.</li>
        </ol>
        <p><span class="bold">Tip</span>: Facebook leverages the Facebook Graph API, however, this API includes user request limitations. To overcome these limitations, try to reduce the date range or query fewer tables for a single build. For more information, see <a href="https://developers.facebook.com/docs/graph-api/advanced/rate-limiting">Facebook’s Graph API limitations</a>.</p>
        <p>If you have any problems connecting to your data source, see <a href="https://support.sisense.com/hc/en-us/community/posts/360013657533-Troubleshooting-JDBC-Data-Connectors?flash_digest=bb409caea6311b2ed547437d608be67bdab8187d">Troubleshooting JDBC Data Connectors</a>.</p>
        <h2 class="notoc"><a name="Facebook"></a>Facebook Tables</h2>
        <p>The table below describes the tables you can import from various Facebook APIs. Facebook limits the number of calls and the amount of data that you can retrieve from their APIs. These limitations depend on which Facebook API you are using and your account type. When you reach a limit, <MadCap:variable name="Variables.CompanyName" /> returns the error provided by Facebook. For example, if you receive any of the following error codes, this usually indicates that you have reached one of Facebook’s limitations:</p>
        <ul>
            <li>error code = 4, CodedException</li>
            <li>error code = 32, CodedException</li>
            <li>error code = 17,  User request limit reached</li>
        </ul>
        <p>If you encounter one of these errors, refer to the Facebook API that exposed the table for more details regarding that API’s limitations.</p><span class="bold">Note</span>: Some Facebook tables require custom SQL, the table below provides examples of custom SQL statements you can use to access the relevant table.<h3 class="notoc">Available Tables</h3><table style="width: 100%;"><col /><col /><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>Groups</td><td>The Groups table returns information about the groups of the user defined in the connection string. Groups may require the user_groups permission.</td></tr><tr><td>GroupMemberships</td><td>The GroupsMemberships table returns all members of all groups for the user defined in the connection string. Groups may require the user_groups permission. GroupMemberships in Facebook are the individual members of a given group.</td></tr><tr><td>Albums</td><td>The Albums table returns a information about albums associated with a user defined in the connection string. Accessing Album information typically requires the user_photos permission.</td></tr><tr><td>Applications</td><td>The Application table returns information about a user’s applications.</td></tr><tr><td>Books	</td><td>	The Books table returns information regarding books a user is interested in. Accessing Book information typically requires the user_books permissions.</td></tr><tr><td>Events</td><td>The Events for a user based on either the Target or SearchTerms. May require the user_events permission.</td></tr><tr><td>Users</td><td>The Users table returns information about a user according to SearchTerms or Id.</td></tr><tr><td>Pages</td><td>The Pages table returns the pages of a user.</td></tr><tr><td>Posts</td><td>The Posts table for a user based on either the Target or Id. Posts can also be inserted based on a Target, or deleted based on Id. This table requires authentication.</td></tr><tr><td>Page_Posts</td><td>The Page_Posts table returns information regarding the posts for all pages for a user.</td></tr><tr><td>Post_Comments</td><td>All Post_Ccomments table returns information regarding all the posts of a user.</td></tr><tr><td>Comments_For_Page_Posts</td><td>All Comments_For_Page_Posts table returns information regarding all the comments of a page post by a user.</td></tr><tr><td>Album_Comments</td><td>	The Album_Comments table returns information regarding comments for a user’s albums.</td></tr><tr><td>Photo_Comments</td><td>The Photo_Comments table returns information regarding comments for a user’s photos.</td></tr><tr><td>Video_Comments</td><td>The Video_Comments table returns information regarding comments for a user’s videos.</td></tr><tr><td>MyVideos</td><td>The MyVideos table returns information regarding videos for a user. Videos in Facebook are videos that have been uploaded by a user or to a page on Facebook. Normally requires the user_videos permission.</td></tr><tr><td>MyLikes</td><td>The Likes table returns information regarding a user’s likes. Likes in Facebook represent the users that like a particular target. The target may be a post, page, picture, or other type of valid entity that may have likes associated with it.</td></tr><tr><td>Post_Likes</td><td>The Post_Likes table returns information regarding posts a user liked.</td></tr><tr><td>Page_Likes</td><td>The Page_Likes table returns information regarding pages a user liked.</td></tr><tr><td>Photo_Likes</td><td>The Photo_Likes table returns information regarding photos a user liked.</td></tr><tr><td>Milestones</td><td>The Milestones table returns information regarding milestones for the given Page. Milestones may only be inserted, updated, or deleted when authenticating as the target Page.</td></tr><tr><td>Friends</td><td>	The Friends table returns information regarding the friends of a user. Requires the user_friends permission.</td></tr><tr><td>Games</td><td>	The Games table returns information regarding games a user is interested in. Accessing Game information may require the user_likes and user_interests permissions.</td></tr><tr><td>InsightsByConsumptionType</td><td>	Allows retrieval of insights by consumption type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByFeedbackType</td><td>Allows retrieval of insights by feedback type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByLikeSourceType</td><td>	Allows retrieval of insights by like source type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByPaidStatus</td><td>Allows retrieval of insights by paid status.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByReactionTotals</td><td>	Allows retrieval of insights by like source type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByStoryType</td><td>Allows retrieval of insights by like story type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>InsightsByTabType</td><td>	Allows retrieval of insights by tab type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>SimpleInsights</td><td>Allows the retrieval of simple insights with a single value in the response.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>SimpleVideoInsights</td><td>Allows the retrieval of simple video insights with a single value in the response.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>VideoInsightsByActionType</td><td>Allows the retrieval of video insights by story action type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>VideoInsightsByDistributionType</td><td>Allows the retrieval of video insights by distribution type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>VideoInsightsByReactionType</td><td>Allows the retrieval of video insights by reaction type.

For examples and more information regarding this table, see <a href="facebook-insights.htm">Facebook Insights</a>.</td></tr><tr><td>Movies</td><td>The Movies table returns information regarding movies a user is interested in. Accessing Movie information requires the user_likes and user_interests permissions.</td></tr><tr><td>Music</td><td>The Music table returns information regarding music a user is interested in. Accessing Music requires the user_likes and user_interests permissions.</td></tr><tr><td>Photos</td><td>The Photos table returns information regarding a user’s photos. Accessing Photo information typically requires the user_photos permission.</td></tr><tr><td>Album_Photos</td><td>The Album_Photos table returns information regarding a user’s album photos. Accessing Album information typically requires the user_photos permission.</td></tr><tr><td>Event_Photos</td><td>The Event_Photos table returns information regarding a user’s photos from an event. May require the user_events permission.</td></tr><tr><td>Page_Photos</td><td>The Page_Photos table returns information regarding a user’s photos from any of their pages.</td></tr><tr><td>User_Photos</td><td>	The Photos table returns information regarding a user’s photos. Accessing Photo information typically requires the user_photos permission.</td></tr><tr><td>TaggedBy</td><td>Query information about Posts, Statuses, Photos, and other entities that have tagged the User or Page. This view is a derivative of the Wall connection where only entries that have tagged the Target User or Page will be returned. In general it is only available for Pages.</td></tr><tr><td>Television</td><td>Query the TV shows a User is interested in. Accessing Television information may require the user_likes and user_interested permissions.</td></tr><tr><td>Wall</td><td>Query Posts from the Wall of a Target.</td></tr><tr><td>Permissions</td><td>Query the Permissions the User has granted the current application.</td></tr><tr><td>Likes_For_Page_Posts</td><td>Likes of my posts on pages.</td></tr></tbody></table><p><span class="bold">Note</span>: For the following tables: InsightsByConsumptionType, InsightsByFeedbackType, InsightsByLikeSourceType, InsightsByPaidStatus, InsightsByTabType, SimpleInsights, the Object Insights period {day, week, month, lifetime} lifetime is not supported for all measures. For more information, see Facebook’s API documentation.<br /></p><h3 class="notoc"><a name="Creating"></a>Creating an App</h3><p>To access Facebook’s data from <MadCap:variable name="Variables.CompanyName" /> with a customized connection string, you must provide valid Facebook credentials in a connection string.</p><p>This section describes how to create a Facebook app to retrieve the necessary authentication parameters for the connections string and then how to construct the connection string.</p><p><span class="bold">Note</span>: If you have already created a connection string for the Facebook Ads connector, you can use the same credentials in the Facebook connection string.</p><p>The credentials you need to connect to your data in Facebook are provided by Facebook when you create a Facebook app through the Facebook Developer site.</p><p>For more information, see <a href="#Creating"><a href="create-app-facebook.htm#Creating">Creating an App</a></a>.</p><h3 class="notoc">Creating a Connection String</h3><p><MadCap:variable name="Variables.CompanyName" /> uses connection strings to connect to Facebook and import data into the <MadCap:variable name="Variables.ECM" />. Each connection string contains authentication parameters that the data source uses to verify your identity and what information you can export to <MadCap:variable name="Variables.CompanyName" />.</p><p><span class="bold">Note</span>: When switching accounts, you must sign out of your account and then sign it with the new account.</p><p>After you have obtained the relevant credentials, you can create the connection used to connect to your Facebook account. The Facebook connection string has the following structure:</p><p class="code">jdbc:DataSourceName:Property1=Value1;Property2=Value2;</p><p>The following is an example of a Facebook connection string:</p><p class="code">jdbc:facebook:OAuthClientId=112345383774486;OAuthClientSecret=064c524478d712534b7e7e4224fad;</p><p class="code">InitiateOAuth=GETANDREFRESH;Version=2.8;CallbackURL=http://localhost/;Timeout=0;ThrottleSeconds=15;ThrottleMaxPercent=90;</p><p><span class="code">Other=RetryWait</span>Time=60000;MaximumRequestRetries=5;</p><p>The example above includes both mandatory and optional parameters you can provide in the connection. The required parameters are emphasized in bold.</p><h4 class="notoc">Mandatory Parameters</h4><ul><li><span class="bold">OAuthClientId</span>: Set this to the App ID in your app settings.</li><li><span class="bold">OAuthClientSecret</span>: Set this to the App Secret in your app settings.</li><li><span class="bold">CallbackURL</span>: Set this to the Return URL in your app settings.</li><li><span class="bold">InitiateOAuth</span>: Set this to GETANDREFRESH. You can use InitiateOAuth to avoid repeating the OAuth exchange and manually setting the OAuthAccessToken connection property.</li></ul><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Optional Parameters</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><ul><li>Aggregate Format: The format aggregate or collection columns should return in.</li><li>Authenticate As Page: The name or Id of a page to authenticate as when making requests to Facebook.</li><li>Auto Cache: The AutoCache property controls automatic caching of data.</li><li>Cache Connection: The connection string for the cache database.</li><li>Cache Driver: The database driver to be used to cache data.</li><li>Cache Location: Specifies the path to the cache when caching to a file.</li><li>Cache Metadata: Whether or not to cache the table metadata. The cache will be stored in memory unless CacheConnection or CacheLocation are set.</li><li>Callback URL: The OAuth callback URL to return to when authenticating. This value must match the callback URL you specify in your app settings.</li><li>Firewall Password: A password, if authentication is required to connect through a firewall.</li><li>Firewall Port: The TCP port for the firewall FirewallServer — see the description of the FirewallServer option for details.</li><li>Firewall Server: Specify a firewall name or IP address to authenticate requested connections, if necessary.</li><li>Firewall Type: The type of firewall to connect through.</li><li>Firewall User: The user name to authenticate with the firewall.</li><li>Initiate OAuth: Set this property to initiate the process to obtain or refresh the OAuth access token when you connect.</li><li>Location: A path to the directory that contains the schema files defining tables, views, and stored procedures.</li><li>Logfile: A path to the log file.</li><li>Max Log File Size: A string specifying the maximum size in bytes for a log file (ex: 10MB). When the limit is hit, a new log is created in the same folder with the date and time appended to the end.</li><li>MaximumRequestRetries: The maximum amount of request retries.</li><li>OAuth Access Token: The access token for connecting using OAuth.</li><li>OAuth Client Id: The client Id assigned when you register your application with an OAuth authorization server.</li><li>OAuth Client Secret: The client secret assigned when you register your application with an OAuth authorization server.</li><li>OAuth Settings Location: The location of the settings file where OAuth values are saved when InitiateOAuth is set to GETANDREFRESH or REFRESH.</li><li>Offline:Use offline mode to get the data from the cache instead of the live source.</li><li>Other: The other parameters necessary to connect to a data source, such as username and password, when applicable.</li><li>Pagesize: The maximum number of results to return per page from Facebook.</li><li>Proxy Auth: Scheme The proxy server authorization scheme (default: BASIC).</li><li>Proxy Auto Detect: This indicates whether to use the default system proxy settings or not. Set ProxyAutoDetect to FALSE to use custom proxy settings. This takes precedence over other proxy settings.</li><li>Proxy Password:A password, if authenticating with a proxy server.</li><li>Proxy Port: The TCP port for the proxy ProxyServer (default: 80).</li><li>Proxy Server: If a proxy server is given, then the HTTP request is sent to the proxy instead of the specified server.</li><li>Proxy SSL Type: The SSL type to use when connecting to the proxy server (default: AUTO).</li><li>Proxy User: A user name, if authentication is to be used for the proxy.</li><li>Pseudo Columns: Indicates whether or not to include pseudo columns as columns to the table.</li><li>Query Cache: The time duration, in seconds, for which the in-memory cached data is reused.</li><li>Readonly: You can use this property to enforce read-only access to Facebook from the provider.</li><li>RetryWaitTime: The amount of time in milliseconds to wait before retrying to query the Facebook API.</li><li>RTK: The runtime key used for licensing.</li><li>Search Terms: Default SearchTerms if none are specified. Used for some tables, such as Users, where SearchTerms may be specified.</li><li>SSL Server Cert: The certificate to be accepted from the server when connecting using TLS/SSL.</li><li>Support Enhanced SQL: If set to true, the provider will cache the entire table in memory and issue the current query against the memory cache. Allows queries with aggregate functions that are otherwise unsupported. The entire memory cache is discarded after the query is executed, unlike QueryCache.</li><li>Tables: Comma-separated list of tables to be listed. For example: Tables=TableA,TableB,TableC.</li><li>Target: A default target if none is specified. Used for some tables, such as Comments, where a target may be specified.</li><li>ThrottleSeconds: Indicates how many seconds to wait until sending another insight request when the ThrottleMaxPercent has been met.</li><li>ThrottleMaxPercent: The threshold set for throttling further insight requests. The defaults for ThrottleSeconds and ThrottleMaxPercent are 10 and 95.</li><li>Timeout:The value in seconds until the timeout error is thrown, canceling the operation.</li><li>Verbosity: The verbosity level that determines the amount of detail included in the log file.</li><li>Version: The Facebook Graph API version to use.</li></ul><p class="indent">You can see your version in the Facebook Developer dashboard. See the Facebook Platform Changelog to see if your version is still supported.</p></MadCap:dropDownBody></MadCap:dropDown><h4 class="notoc">Switching between Accounts</h4><p>When you connect to the Facebook data source, <MadCap:variable name="Variables.CompanyName" /> saves your OAuth values in the file OAuthsettings.txt file located at …\Users\xxx\AppData\Roaming\CData\Facebook Data Provider on your <MadCap:variable name="Variables.CompanyName" /> server. To connect to the Facebook data source with another user on the same machine, you must delete the OAuthsettings.txt file. <MadCap:variable name="Variables.CompanyName" /> will then generate a new file for that user.</p><p>Another option to support multiple users is to define the location and file name of an OAuthsettings file for each unique user in your connection string through the OAuthSettingsLocation parameter. When each user connects to the data source, <MadCap:variable name="Variables.CompanyName" /> generates the OAuth file with the file name you specify in the location you define. In the examples below, two users are allowed to access the Facebook data source and for each user, Sisense generates a file that contains that user’s OAuth values in the location defined in the string.</p><p class="code">jdbc:facebook:OAuthSettingsLocation=C:\facebook\auth\john.txt;OAuthClientId=11276856774486;OAuthClientSecret</p><p class="code">=064c70d78567jm2b7e7e4224fad;InitiateOAuth=GETANDREFRESH;Version=2.8;CallbackURL=http://localhost/;</p><p class="code">jdbc:facebook:OAuthSettingsLocation=C:\facebook\auth\sally.txt;OAuthClientId=11276856774486;OAuthClientSecret</p><p class="code">=064c70d78567jm2b7e7e4224fad;InitiateOAuth=GETANDREFRESH;Version=2.8;CallbackURL=http://localhost/;</p><p>In the example above, to OAuth files are created, one for John and one for Sally in the location C:\facebook\auth\.</p><p>This is useful if you support many users who each need to access the Facebook data source.</p><h3 class="notoc"><a name="Changing"></a>Changing Facebook Connectivity Settings</h3><p>Prior to <MadCap:variable name="Variables.CompanyName" /> V6.6.1, Facebook Ads tables were part of the Facebook Connector. Sisense has created a new Facebook Ads connector that supports tables specific to Facebook Ads. These tables include:</p><p>AdAccounts, AdCreatives, Ads, AdScheduledReports, AdSets, Campaigns, AdInsights, AdInsightsActions</p><p>You can continue to use earlier versions of the Facebook connector to connect to these tables, but this may require custom SQL queries. To connect to these tables quickly and easily without any custom SQL, you need to install the Facebook Ads connector and change the connectivity settings to direct these tables to the Facebook Ads connector.</p><p>For more information on how to change connectivity settings after installing the Facebook Ads connector, see <a href="#Changing">Changing Connectivity Settings</a>.</p><p class="bold">Accumulative Builds</p><p><MadCap:variable name="Variables.CompanyName" /> support accumulative builds for all numeric and dates data types. However, the data must be sorted before building the <MadCap:variable name="Variables.ElastiCube" />.</p><h4 class="notoc">Versions</h4><table style="width: 100%;"><col /><col /><col /><thead><tr><th>Version</th><th>Release Date</th><th>Improvements</th></tr></thead><tbody><tr><td>6.6.1.113</td><td>June 12, 2017</td><td>New version of Graph API v2.9 Changelog
New views added: InsightsByReactionTotals, SimpleVideoInsights, VideoInsightsByActionType, VideoInsightsByDistributionType, VideoInsightsByReactionType
New insights added for the InsightsByConsumptionType view: POST_CONSUMPTIONS_BY_TYPE, POST_CONSUMPTIONS_BY_TYPE_UNIQUE 
For more information about Version 6.6.1.113 including Breaking Changes, see Version 6.6.1.113 below.</td></tr><tr><td>6.6.0.74</td><td>March 16, 2017</td><td>JSON columns in the AdInsights table are available for querying in AdInsightActions by using the ActionCollection column</td></tr><tr><td>6.6.1.65</td><td>March 9, 2017</td><td>In some scenarios, getMetaData() returned unexpected results</td></tr><tr><td>6.6.0.52</td><td>March 6, 2017</td><td><p>	Dynamic Targets
</p><p>New table: GroupMemberShips</p></td></tr></tbody></table><p class="bold">Version 6.6.1.113</p><p class="bold">Breaking Changes</p><p>In the latest version of the Facebook Graph API, permissions have been largely reworked. All of the friends* permissions have been removed. In addition, most permissions require Facebook approval if you wish to request information about other user accounts who are not an administrator of the Facebook App. <MadCap:variable name="Variables.CompanyName" /> recommends reviewing the new permissions listed by Facebook here:</p><p><a href="https://developers.facebook.com/docs/facebook-login/permissions/v2.1">https://developers.facebook.com/docs/facebook-login/permissions/v2.1</a></p><p>In addition, users may reject requested permissions in the Authorization dialog on Facebook. If this happens, the specific Permissions requested will state that they are declined under the Status column. The permission may be rerequested by executing GetOAuthAccessToken and setting AuthType to rerequest.</p><p>If you want to keep using an old version of the API, you can by simply setting the Version connection property in the connection string to the specific version you were using and also setting the Location to a folder where you have saved an older copy of the schema files (.rsd and .rsb files).</p><p>If you want to update your app to 2.9, then you don’t have to do anything</p><span class="bold">Note</span>: Sisense removed few metrics from the AdInsights / AdInsightsActions due to their removal by Facebook in 2.9.<p>A number of various changes have been made across tables due to changes in Facebook. These changes are listed below:</p><ul><li>Facebook no longer allows public posts to be searched. We have had to remove SearchTerms from the Posts table because of this.</li><li>Checkins have been removed from the Graph API. Due to this, we have removed the Checkins table.</li><li>Events may no longer be inserted, updated, or deleted via the Graph API. We have had to change the Events table to a view.</li><li>Usernames for Facebook Users may no longer be used as a target and are no longer returned. The Facebook username for Pages is unaffected.</li><li>User ID’s for Facebook Users will be different across different Facebook Apps. This is due to the new policy of App-scoped User ID’s.</li></ul></body>
</html>