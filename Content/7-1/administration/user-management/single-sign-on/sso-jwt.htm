<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>SSO via JWT | Sisense | Documentation</title>
    </head>
    <body>
        <h1>SSO via JWT</h1>
        <p>JWT is a technique that can be used for single sign-on (SSO) between your site and <MadCap:variable name="Variables.CompanyName" />. JWT is a token that represents your users credentials wrapped in a  single query string. In addition, <MadCap:variable name="Variables.CompanyName" /> uses the jti parameter (see below), which adds a unique ID to the token that prevents the token from being used more than once, thus preventing attacks on the system (also known as replay attacks).</p>
        <p>The <MadCap:variable name="Variables.CompanyName" /> SSO via JWT authentication flow is explained in the following diagram. </p><span class="bold">Note</span>:&#160;See the <a href="https://developer.sisense.com/pages/viewpage.action?pageId=1409378">Developers Community</a> for a tutorial that shows how to implement SSO&#160;via JWT. <h2 class="notoc">SSO Authentication Flow</h2><p>The following is a diagram of the SSO authentication flow from your site or application to Sisense.</p><p><img src="../../../../Resources/Images/ssodiagram.png" class="thumblarge" /></p><ol><li>Your user requests a resource from <MadCap:variable name="Variables.CompanyName" />, typically a dashboard.</li><li><MadCap:variable name="Variables.CompanyName" /> recognizes that no authenticated cookie is present. If you have enabled SSO in <MadCap:variable name="Variables.CompanyName" />, the SSO handler redirects the user to your Remote Login URL defined in the <MadCap:variable name="Variables.Sisense Web Application" />.<br /><img src="../../../../Resources/Images/SSO_Remote_Login_URL.png" class="thumblarge" /></li><li>Your user is challenged to authenticate their account.</li><li>Your Remote Login application authenticates your user and generates a JWT (JSON Web Token).</li><li>You redirect the user back to <MadCap:variable name="Variables.CompanyName" /> with the encoded JWT in a query string. <MadCap:variable name="Variables.CompanyName" /> sets a cookie that authenticates the user’s session until they end it or you log them out via the <MadCap:variable name="Variables.CompanyName" /> REST API. For more information see Logging Users Out.</li><li><MadCap:variable name="Variables.CompanyName" /> provides the authenticated user with the request resource.</li></ol><p>A common scenario that illustrates SSO is when an unauthenticated user navigates to your site in which <MadCap:variable name="Variables.CompanyName" /> is embedded via an iFrame. <MadCap:variable name="Variables.CompanyName" /> redirects this user to your SSO script. Your script authenticates the user through your login process and builds a JWT request with all the relevant credentials wrapped together. You then redirect the customer back to <MadCap:variable name="Variables.CompanyName" /> with the JWT payload. <MadCap:variable name="Variables.CompanyName" /> then decodes the user details from the JWT payload and then grants the user a session.</p><h2 class="notoc">Configuring SSO in <MadCap:variable name="Variables.CompanyName" /></h2><p>While SSO is highly customizable, there are generally four steps you should complete when configuring SSO:</p><span class="bold">Note</span>: Configuring SSO requires technical expertise and should be conducted by an administrator or developer with SSO experience.<ol><li><span class="bold">Enabling SSO in <MadCap:variable name="Variables.CompanyName" /></span>: Through the <MadCap:variable name="Variables.Sisense Web Application" />, an administrator can enable SSO in <MadCap:variable name="Variables.CompanyName" /> and define the relevant Login and Logout URLs.</li><li><span class="bold">Creating a JWT</span>: After you authenticate a user, you generate a JWT with the user’s credentials to <MadCap:variable name="Variables.CompanyName" />, so <MadCap:variable name="Variables.CompanyName" /> knows this user is allowed to access resources from <MadCap:variable name="Variables.CompanyName" /> through your site.</li><li><span class="bold">Configure <MadCap:variable name="Variables.CompanyName" /> as a sub-domain</span>: When authenticating users, you should configure SSO as a sub-domain.</li><li><span class="bold">Logging Users Out</span>: A user can access <MadCap:variable name="Variables.CompanyName" /> so long as a session is maintained. To end a session, the user’s cookie that <MadCap:variable name="Variables.CompanyName" /> provides must be deleted. To delete this cookie, you can use the <MadCap:variable name="Variables.CompanyName" /> REST API.</li></ol><h2 class="notoc">Enabling SSO in <MadCap:variable name="Variables.CompanyName" /></h2><p>For <MadCap:variable name="Variables.CompanyName" /> to recognize that your users should be authenticated through SSO, you must enable SSO in the <MadCap:variable name="Variables.Sisense Web Application" />. In the SSO menu of the <span class="bold">Admin</span> page of the <MadCap:variable name="Variables.Sisense Web Application" />, you define the URL where <MadCap:variable name="Variables.CompanyName" /> redirects users to authenticate on your side and where <MadCap:variable name="Variables.CompanyName" /> redirects users after they log out from Sisense.</p><p>When you access the SSO menu of the <span class="bold">Admin</span> page, <MadCap:variable name="Variables.CompanyName" /> displays the Shared Secret key.  The Shared Key is a JWT encryption public key used to encrypt the JWT payload. It is generated once when the SSO configuration is saved. You include this key in the JWT payload when redirecting the user back to <MadCap:variable name="Variables.CompanyName" /> after authenticating them on your side.</p><p class="bold">To access and set up SSO:</p><ol><li>Log into <MadCap:variable name="Variables.CompanyName" />.</li><li>Select <span class="bold">Admin</span> and click <span class="bold">Single Sign On</span> in the left menu.</li><li>Fill in the following SSO configuration fields:</li></ol><ul><li><span class="bold">Remote Login URL</span>: This is the URL that <MadCap:variable name="Variables.CompanyName" /> will invoke to attempt remote authentication. In that endpoint the participating application user authentication script is triggered and the JWT payload is generated.</li><li><span class="bold">Remote Logout URL</span>: This is the URL that users will be redirected to after they log out from <MadCap:variable name="Variables.CompanyName" /> (i.e. the participating application’s home page).</li></ul><ol start="4"><li>Click <span class="bold">Save</span>.</li></ol><h2 class="notoc">Creating a JWT</h2><p>Your script builds a JWT request that contains the user data.</p><p>The table below provides a list and descriptions of the attributes your JWT should contain.</p><p>In addition, several samples are provided below in various languages.</p><table><thead><tr><th>Attribute</th><th>Mandatory</th><th>Description</th></tr></thead><tbody><tr><td>iat</td><td>Yes</td><td><p>Issued at the time the token was generated. This is used to help ensure that a given token gets used shortly after it is generated. The value must be the number of seconds since UNIX epoch. <MadCap:variable name="Variables.CompanyName" /> allows up to five minutes clock skew. </p><p><span class="bold">Note</span>: The date must be an integer and not a float.</p></td></tr><tr><td>sub</td><td>Yes</td><td>Email of the user being signed in, used to uniquely identify the user in <MadCap:variable name="Variables.CompanyName" />. If the user does not exist in <MadCap:variable name="Variables.CompanyName" />, it will be created with default viewer privileges.</td></tr><tr><td>jti</td><td>Yes*</td><td>A unique string added to the token that is used to prevent replay attacks, by making sure the token is used only once.</td></tr></tbody></table><p>* You can set this attribute as optional in the <MadCap:variable name="Variables.CompanyName" /> REST API v1.0 through the POST settings/SSO endpoint.</p><p>SSO Code Samples</p><p><a href="http://download.sisense.com/Tutorials/SSO/SisenseJwtSample.cs">C#</a></p><p><a href="http://download.sisense.com/Tutorials/SSO/SSOHandler.java">Java</a></p><p><a href="http://download.sisense.com/Tutorials/SSO/sisenseJwtSample.js">Javascript</a></p><p><a href="http://download.sisense.com/Tutorials/SSO/SiSenseJWTSample.php">PHP</a></p><p><a href="http://download.sisense.com/Tutorials/SSO/sisense_jwt_example.rb">Ruby</a></p><p><a href="http://download.sisense.com/Tutorials/SSO/sisense_jwt_example.py">Python</a></p><h3 class="notoc">return_to URL</h3><p>When <MadCap:variable name="Variables.CompanyName" /> redirects a user to your login script, <MadCap:variable name="Variables.CompanyName" /> passes a return_to parameter in the URL. This parameter contains the page that <MadCap:variable name="Variables.CompanyName" /> will return the user to after the authentication succeeds. For example:</p><p>A customer visits your site opens a dashboard embedded through an iFrame.</p><p><MadCap:variable name="Variables.CompanyName" /> recognizes that the user is not authenticated.</p><p><MadCap:variable name="Variables.CompanyName" /> redirects the user to:</p><p class="code">https://yourcompany.com/sisense/sso?return_to=https://yourcompany.sisense.com/dashboards/</p><p>All your script needs to do, is take the return_to value from the invoked URL and pass it back to <MadCap:variable name="Variables.CompanyName" /> when submitting the JWT token. In other words, upon authentication on your side, your script redirects the user to:</p><p class="code">https://yourcompany.com/access/jwt?jwt=payload&amp;return_to=https://yourcompany.sisense.com/dashboards/</p><h2 class="notoc">Configuring <MadCap:variable name="Variables.CompanyName" /> as a Sub-Domain with SSO</h2><p>To authenticate your users locally and allow them to access <MadCap:variable name="Variables.CompanyName" />, your first step should be to configure <MadCap:variable name="Variables.CompanyName" />  as a sub-domain of your web application and embed <MadCap:variable name="Variables.CompanyName" /> into your web application with SSO.</p><span class="bold">Note</span>: <MadCap:variable name="Variables.CompanyName" /> also works when embedded in cross-domain iFrames.<p class="bold">To configure <MadCap:variable name="Variables.CompanyName" /> as a Sub-Domain:</p><ol><li>In IIS Management Console, add your website to IIS.<br /><img src="../../../../Resources/Images/IISadd.png" class="thumblarge" /></li><li>In the <span class="bold">Add Website</span> window, in the field <span class="bold">Site Name</span>, enter the site name.<br /><span class="bold">Note</span>: You can not leverage SSO when you enter a DNS address with an underscore “_” with Internet Explorer.<br /><img src="../../../../Resources/Images/addweb.png" class="thumblarge" /></li><li>In <span class="bold">Physical path</span>, enter the subdomain directory.</li><li>Under the Binding area, in <span class="bold">Host name</span>, change the existing SisenseWeb site binding to use <span class="bold">sisense.example.website.com</span> as host name on <span class="bold">port 80</span>.</li><li>Open the file <span class="bold">C:\Windows\System32\drivers\etc\hosts</span> and add mapping for the sites:<br />192.168.5.148 sisense.examplewebsite.com<br />192.168.5.148 example.website.com</li><li>Sign in to the <MadCap:variable name="Variables.Sisense Web Application" /> at <span class="bold">sisense.examplewebsite.com</span> and configure the SSO as pictured below:</li><li>Place the following SSO script in the server location corresponding to the Remote Login URL in the server’s root directory.  The SSO script can be implemented in any server-side language.  This example uses Python.  Example code has been attached for C# and Python.<br /><a href="http://download.sisense.com/Tutorials/SSO/sso-sub-domain.py">Python script example</a><br /><a href="http://download.sisense.com/Tutorials/SSO/sso-C_sharp.zip">C# script example</a></li><li>In index.html from examplewebsite.com, the iFrame source is the <MadCap:variable name="Variables.CompanyName" /> dashboard URL.</li><li>index.html from examplewebsite.com:</li></ol><p class="code">&lt;html&gt;</p><p class="code"> &lt;head&gt;</p><p class="code"> &lt;title&gt;Example Website&lt;/title&gt;</p><p class="code"> &lt;/head&gt;</p><p class="code">&lt;body&gt;</p><p class="code"> &lt;p&gt;&lt;b&gt;examplewebsite.com&lt;/b&gt; - &lt;b&gt;SSO&lt;/b&gt; login with embedded dashboard from    &lt;b&gt;sisense.examplewebsite.com&lt;/b&gt;&lt;/p&gt;</p><p class="code"> &lt;iframe width="100%" height="100%" src='http://sisense.examplewebsite.com/app/main#/dashboards/53b29843751b655443000018?embed=true' /&gt;</p><p class="code"> &lt;/body&gt;</p><p class="code">&lt;/html&gt;</p><p>Navigate to <span class="bold">examplewebsite.com</span> and you should see the specific dashboard you embedded.</p><h2 class="notoc">Logging Users Out</h2><p>When a user is logged in, anyone using that browser can access the session, or users may encounter an issue where they remain logged in until the <MadCap:variable name="Variables.CompanyName" /> cookie is cleared.</p><p>Users are logged out when the session ends. A session ends when the user closes their browser or according to the value of the attribute exp you send in the JWT payload.</p><p>You can log the user out through the <MadCap:variable name="Variables.CompanyName" /> REST API.</p><p>To manually log a user out, access version .9 of the REST API. Through the Auth method, you can issue a get request to log out specific users.</p><p><img src="../../../../Resources/Images/authlog.png" class="thumblarge" /></p><p>While the logout REST API can delete the SSO authentication cookie, it can only delete it when the call is made from within the <MadCap:variable name="Variables.CompanyName" /> domain. Scripts on different pages can access each other only if the pages that executed them are at locations with the same protocol.</p><p>If you have embedded <MadCap:variable name="Variables.CompanyName" /> in an iFrame and you want to log out the user from your application and <MadCap:variable name="Variables.CompanyName" />, you can use the window.postMessage method to call the logout when the users asks to logout from your application. This method overcomes any cross-origin communication limitations. <MadCap:variable name="Variables.CompanyName" /> has created a plugin that implements a listener, which calls the Logout API when the postMessage method() is called. </p></body>
</html>