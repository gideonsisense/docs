<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Using R in Formulas | Sisense | Documentation</title>
    </head>
    <body>
        <h1>Using R in Formulas</h1>
        <p><a href="https://www.r-project.org/">R</a> is a software environment for statistical computing and graphics. <MadCap:variable name="Variables.CompanyName" /> supports the integration of R functions in your formulas.</p>
        <p>You can write R code directly in the formula editor, and send fields as parameters. You can also combine R functionality with the regular functions to create advanced and tailored formulas. (For general help with the formula editor and functions, <a href="using-formula-editor.htm">click here</a>.)</p>
        <p>Before you can integrate R into your formulas, you must have an R server set up in your organization.</p>
        <p>This document will cover the following:</p>
        <ul>
            <li>Understanding How R works in <MadCap:variable name="Variables.CompanyName" /></li>
            <li>Connecting <MadCap:variable name="Variables.CompanyName" /> to Your R Server</li>
            <li>Using R functions in Formulas</li>
            <li>Guidelines for using R code in <MadCap:variable name="Variables.CompanyName" /></li>
            <li>Example 1: Simple R Function – Kmeans Clustering</li>
            <li>Example 2: R Logistic Regression via <MadCap:variable name="Variables.CompanyName" /></li>
            <li>Example 3: Loading an Existing R Model</li>
            <li>Example 4: Building and Saving a R Model using Data from <MadCap:variable name="Variables.CompanyName" /></li>
        </ul>
        <h2 class="notoc">Understanding How R works in <MadCap:variable name="Variables.CompanyName" /></h2>
        <p>Within a widget, R code is used and assigned fields as parameters, the following happens:</p>
        <ol>
            <li>The selected fields are sent fully to R as a list of arrays.</li>
            <li>The R code is executed on the R server, referencing the fields as needed.</li>
            <li>The numeric results from R are sent back to the widget for visualization.</li>
        </ol>
        <p>Each request from the R server is done in a self-contained namespace, thus R variables and results cannot be reused across requests unless they are loaded from a saved location.</p>
        <p>R calculations are computed in the R server, and not in the  <MadCap:variable name="Variables.ElastiCube" />, this means that for larger data sets results will not return as fast as regular widgets. </p><span class="bold">Running R on Windows</span>
        <br />If your R server is running on Windows you will be bound to the concurrency limitations the R distribution has on Windows. This means that concurrent requests to R may return wrong results. Sisense recommends using R on a Linux machine for production environment with concurrent user activity.<h2 class="notoc">Connecting <MadCap:variable name="Variables.CompanyName" /> to Your R Server</h2><p class="bold">To connect your <MadCap:variable name="Variables.CompanyName" /> instance to your R server:</p><ol><li>Open the <MadCap:variable name="Variables.CompanyName" /> Server Console from the start menu.</li><li>Click on the Server Preferences icon to open the server settings.</li><li>In the <span class="bold">Rserve</span> field, enter the IP address of your R server, and select the checkbox to enable the connection.<br /><img src="../../../Resources/Images/rserve-settings.png" class="thumblarge" /></li></ol><p>You can test the connection by clicking on the <span class="bold">Test</span> button.</p><p><span class="bold">Installing Rserve</span></p><p><MadCap:variable name="Variables.CompanyName" />can only connect to a running Rserve instance. For more information about installing and running Rserve <a href="https://rforge.net/Rserve/doc.html">follow this link</a>.</p><p>Please note that if you’re using RStudio, Rserve still has to be installed.</p><h2 class="notoc">Using R functions in Formulas</h2><p>Using R code in <MadCap:variable name="Variables.CompanyName" /> is achieved by using two dedicated formulas – RINT &amp; RDOUBLE. Depending on the result type of your R code, use the appropriate function within the <a href="using-formula-editor.htm">formula editor</a>.</p><p>For either formula, RINT or RDOUBLE, the return type has to be an exact match.</p><p><img src="../../../Resources/Images/r-eg1.png" class="thumblarge" /></p><p>Multiple numeric field values can be passed as parameters to the R functions, which within your R code can be accessed via the ‘args’ argument (See K-means example below).</p><p class="bold">Syntax:</p><p class="code">RINT([recycle (true)], [&lt;Ordering&gt;], &lt;R expression&gt;, [&lt;numeric value 1&gt;, ...,  &lt;numeric value n&gt;] )</p><p class="code">RDOUBLE([recycle (true)], [&lt;Ordering&gt;], &lt;R expression&gt;, [&lt;numeric value 1&gt;, ...,  &lt;numeric value n&gt;] )</p><MadCap:variable name="Variables.CompanyName" /> does not support the use of a final ‘;’ in R statements. If you add a semi-colon at the end of your R statement, the code will fail.<p class="bold">Parameters:</p><ul><li><span class="bold">Recycle true/false (default = true)</span> – This is an optional parameter that controls whether the results from R should be recycled (cached), so that consequent queries will not have to be recalculated unless they or the data have changed. Generally, this behavior is automatically managed by the <MadCap:variable name="Variables.ElastiCube" /> automatically for all functions. However, since R code might have non-deterministic components to it (such as randomality functions or date-specific functions), the <MadCap:variable name="Variables.ElastiCube" /> cannot rely on a data-set and function that hasn’t changed not to return a different result in multiple executions.<br />By default, the Recycle value is set to true. Use ‘off’ if your R code contains randomality or other non-deterministic content.</li><li><span class="bold">Ordering</span> – This is an optional parameter that defines the sort order in which numeric data is sent to R. The argument of the Ordering parameter can be an index in your data source or you can use the ORDERING() function to determine the order of your fields. This function arranges the values of the arguments into ascending or descending order, breaking ties by further arguments.<br />For example:<br /><span class="code">ORDERING([Total Sales], -1*[COUNT Salesman], MIN(&lt;Office Name&gt;))</span><br />For more information about the ORDERING() function, <a href="function-references.htm">click here</a>.</li><li><span class="bold">R expression</span> – Your R code needs to be passed here, wrapped in double quotes. R expects the return type to be an array with the same size as widget’s row count. Nulls will be used to make up for shorter arrays, and longer arrays will be trimmed.<br />Use single quotes to wrap strings within your R code when using the Rint/Rdouble functions, so that there will be no double-quote collision with the quotes wrapping your R code within the Rint/Rdouble function.</li><li><span class="bold">Numeric Value Arguments</span> – Numeric values can be passed as arguments to your R code.</li><li>All arguments are passed to R as a 1-based list named “args”. Each item in the list contains an array that represents the field.<br />For example:<ul><li>args[[1]] will return an array which represents the first field that was used as an argument.</li><li>args[[2]][3] will return the 3rd data value within the 2nd field that was used as an argument.</li></ul></li></ul><h2 class="notoc">Guidelines for using R code in <MadCap:variable name="Variables.CompanyName" /></h2><p>In order for your R code to work well in <MadCap:variable name="Variables.CompanyName" /> you need to make sure of the following:</p><ol><li>The resultset returned from R into <MadCap:variable name="Variables.CompanyName" /> has to be equal in size to the dataset that is sent to R as parameters.</li><li>The order of the resultset return from R into <MadCap:variable name="Variables.CompanyName" /> has to match the incoming order. No assumptions can be made about the incoming order – This means that you cannot assume that the incoming order matches the order you visually see in the widget.</li></ol><h2 class="notoc">Example 1: Simple R Function – Kmeans Clustering</h2><p><span class="bold">Description</span>: In the example below the Total Cost and Total Revenue fields from <MadCap:variable name="Variables.CompanyName" /> are being used to cluster data via a Kmeans function. The result will cluster the data based on the kmeans settings, in this case 4 clusters.</p><p class="bold"><MadCap:variable name="Variables.CompanyName" /> Syntax:</p><p class="code">RINT(TRUE, "m&lt;- log(matrix(unlist(args), ncol = 2));</p><p class="code">kmeans(m,4)$cluster" ,[Total Cost],[Total Revenue])</p><p><span class="bold">Result</span>: The R expression will return a result from 1 to 4. The widgets color settings can be configured to color corresponding values based on if they equal 1, 2, 3 or 4.</p><p><span class="bold">Tip</span>: You can <a href="using-formula-editor.htm">save (star)</a> the complex formula above, and use it again in additional formulas and charts.</p><p>In the chart’s BREAK BY/COLOR panel, you can change the color of the clusters as well as define the number of clusters and their break points.</p><p><img src="../../../Resources/Images/r_cluster_color.png" class="thumblarge" /></p><p><img src="../../../Resources/Images/r_cluster.png" class="thumblarge" /></p><h2 class="notoc">Example 2: R Logistic Regression via <MadCap:variable name="Variables.CompanyName" /></h2><p><span class="bold">Description</span>: In the example below website traffic data is used to predict if a conversion is likely to occur based on the source of web traffic. The following fields contained in the <MadCap:variable name="Variables.ElastiCube" /> are passed to the R logistic model: Average Outcome (1=conversion, 0= no conversion), Average Time on Page, Average Pages (viewed) and Average Bounce Rate. This data is passed to a model to predict the outcome and likelihood the traffic will convert.</p><p>[For the sake of illustration both the training and test data set are the same in the example]</p><p class="bold"><MadCap:variable name="Variables.CompanyName" /> Syntax:</p><p class="code">RDOUBLE(TRUE,"mydata&lt;-data.frame(convert=args[[1]], time=args[[2]], pages=args[[3]], bounce=args[[4]]);lrmodel &lt;- glm(convert ~ time + pages + bounce, data = mydata, family = 'binomial');prob &lt;- predict(lrmodel, newdata = mydata, type = 'response')", [Average Outcome], [Average TimeonPage], [Average Pages], [Average BounceRate])</p><p><span class="bold">Result</span>: The R expression will return a result from 0 to 1 showing the likelihood of a conversion occurring. Note a similar process can be applied to create a linear regression.</p><p><img src="../../../Resources/Images/r_log.png" class="thumblarge" /></p><p>Predicted outcome of website conversion based on logistic regression.</p><h2 class="notoc">Example 3: Loading an Existing R Model</h2><p><span class="bold">Description</span>: In the example below a saved logistic regression built on previous training data is called and used with new website traffic data to predict if a conversion occurs. The following fields contained in the <MadCap:variable name="Variables.ElastiCube" /> are passed to the saved R logistic model: Average Outcome (1=conversion, 0= no conversion), Average Time on Page, Average Pages (viewed) and Average Bounce Rate. This data is passed to a model to predict the outcome and likelihood the traffic will convert.</p><p class="bold"><MadCap:variable name="Variables.CompanyName" /> Syntax:</p><p class="code">RDOUBLE(TRUE,"mydata&lt;-data.frame(convert=args[[1]], time=args[[2]], pages=args[[3]], bounce=args[[4]]);load('C:\rdata');prob &lt;- predict(lrmodel, newdata = mydata, type = 'response')", [Average Outcome], [Average TimeonPage], [Average Pages], [Average BounceRate])</p><p><span class="bold">Result</span>: The R expression will return a result from 0 to 1 showing the likelihood of a conversion occurring based on the loaded R model in this case stored in ‘rdata’.</p><h2 class="notoc">Example 4: Building and Saving a R Model using Data from <MadCap:variable name="Variables.CompanyName" /></h2><p><span class="bold">Description</span>: In the example below a logistic regression to predict if a website conversion will occur is built using data from <MadCap:variable name="Variables.CompanyName" /> and then saved as an R model. The following fields contained in the <MadCap:variable name="Variables.ElastiCube" /> are passed to create the R logistic model: Average Outcome (1=conversion, 0= no conversion), Average Time on Page, Average Pages (viewed) and Average Bounce Rate. This data is saved as an rdata file and can be used on other data sets to predict outcomes.</p><p class="bold"><MadCap:variable name="Variables.CompanyName" /> Syntax:</p><p class="code">RDOUBLE(TRUE,"mydata&lt;-data.frame(convert=args[[1]], time=args[[2]], pages=args[[3]], bounce=args[[4]]);lrmodel &lt;- glm(convert ~ time + pages + bounce, data = mydata, family = 'binomial'); save(lrmodel, file = 'C:\rdata') ;1", [Average Outcome], [Average TimeonPage], [Average Pages], [Average BounceRate])</p><p><span class="bold">Result</span>: The R expression will use Sisense data to build and save a logistic model in the specified file in this case ‘rdata’.</p></body>
</html>