<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Function Reference | Sisense | Documentation</title>
    </head>
    <body>
        <h1>Function Reference</h1>
        <p>This page contains a list of all the functions you can use in <MadCap:variable name="Variables.CompanyName" />’s formula editor.</p>
        <h2 class="notoc">Statistical Functions</h2>
        <h3 class="notoc">Average</h3>
        <p class="code">Avg(&lt;numeric Field&gt;)</p>
        <p>Calculates the mean average of the given values.</p>
        <p>For example – AVG(Score) will calculate the mean average of the given scores.</p>
        <p class="code">Avg(&lt;group by field&gt;, &lt;aggregation&gt;)</p>
        <p>Calculates the average of the given aggregation grouped by another filed.</p>
        <p>For example – Avg( Product, Total Sales) will calculates the average of the total sales per product.</p>
        <h3 class="notoc">Contribution</h3>
        <p class="code">Contribution(&lt;numeric field&gt;)</p>
        <p>Calculates the percentage of total.</p>
        <p>For example – Contribution( Total Sales ) will calculate the percentage of total sales per group (for example per day or per product) out of total sales (for all days or all products).</p>
        <h3 class="notoc">Correlation</h3>
        <p class="code">CORREL(&lt;Numeric Field a&gt;, &lt;Numeric Field b&gt;)</p>
        <p>Returns the correlation coefficient of two numeric fields.</p>
        <p>For example – CORREL(Revenue, Cost) will return the correlation between revenue and cost.</p>
        <p class="code">CORREL(&lt;group by field&gt;, &lt;aggregation a&gt;, &lt;aggregation b&gt;)</p>
        <p>Returns the correlation coefficient of two fields aggregations grouped by another field.</p>
        <p>For example – CORREL(Products, AVG(Revenue), AVG(Cost)) will return the correlation between the average of revenue and cost per product.</p>
        <h3 class="notoc">Count</h3>
        <p class="code">Count(&lt;Numeric Field&gt;)</p>
        <p>Counts the number of unique values withing the given values.</p>
        <h3 class="notoc">Count All</h3>
        <p class="code">DupCount(&lt;Numeric Field&gt;)</p>
        <p>Returns the actual item count of the given list of items, including duplicates.</p>
        <h3 class="notoc">Covariance (Population)</h3>
        <p class="code">COVARP(&lt;Numeric Field a&gt;, &lt;Numeric Field b&gt;)</p>
        <p>Returns the population covariance of &lt;Numeric Field a&gt; and &lt;Numeric Field b&gt;.</p>
        <p>For example – COVARP(Revenue, Cost) will return the population covariance of revenue and cost.</p>
        <p class="code">COVARP(&lt;group by field&gt;, &lt;aggregation a&gt;, &lt;aggregation b&gt;)</p>
        <p>Returns the population covariance of two fields aggregations grouped by another field.</p>
        <p>For example – COVARP(Products, AVG(Revenue), AVG(Cost)) will return the population covariance of the average revenue and the average cost per product.</p>
        <h3 class="notoc">Covariance (Sample)</h3>
        <p class="code">COVAR(&lt;Numeric Field a&gt;, &lt;Numeric Field b&gt;)</p>
        <p>Returns the sample covariance of &lt;Numeric Field a&gt; and &lt;Numeric Field b&gt;.</p>
        <p>For example – COVAR(Revenue, Cost) will return the sample covariance of revenue and cost.</p>
        <p class="code">COVAR(&lt;group by field&gt;, &lt;aggregation a&gt;, &lt;aggregation b&gt;)</p>
        <p>Returns the sample covariance of two fields aggregations grouped by another field.</p>
        <p>For example – COVAR(Products, AVG(Revenue), AVG(Cost)) will return the sample covariance of the average revenue and the average cost per product.</p>
        <h3 class="notoc">Exponential Distribution</h3>
        <p class="code">EXPONDIST(&lt;numeric value&gt;, &lt;lambda&gt;, &lt;Cumulative (true/false)&gt;)</p>
        <p>Returns the exponential distribution for a given value and a supplied distribution parameter lambda. Cumulative: TRUE = Cumulative distribution function, FALSE = Probability density function. For example – EXPONDIST( Count(Leads), 2, False ) will return  the exponential distribution density of the number of leads per country where lambda is 2.</p>
        <h3 class="notoc">Intercept</h3>
        <p class="code">INTERCEPT(&lt;field&gt;, &lt;numeric value&gt;)</p>
        <p>Returns the intercept of the linear regression line through a supplied series of x- and y- values.</p>
        <p>For example – INTERCEPT(Date.Quarter, Total Sales) will return the intercept of the regression line that represents the trend over quarter of the sum of sales.</p>
        <h3 class="notoc">Largest</h3>
        <p class="code">LARGEST(&lt;Numeric Field&gt;, &lt;k&gt;)</p>
        <p>Returns the k-th largest value in a field.</p>
        <h3 class="notoc">Maximum</h3>
        <p class="code">Max(&lt;Numeric Field&gt;)</p>
        <p>Returns the maximum value among the given values.</p>
        <h3 class="notoc">Median</h3>
        <p class="code">MEDIAN( &lt;Numeric Field&gt; )</p>
        <p>Calculates the median of the given values. The median of a set of data is the middlemost number in the set. The median is also the number that is halfway into the set.</p>
        <h3 class="notoc">Minimum</h3>
        <p class="code">Min(&lt;Numeric Field&gt;)</p>
        <p>Returns the minimum value among the given values.</p>
        <h3 class="notoc">Mode</h3>
        <p class="code">MODE(&lt;Numeric Field&gt;)</p>
        <p>Returns the most frequently occurring value from the column.</p>
        <h3 class="notoc">Normal Distribution</h3>
        <p class="code">NORMDIST(&lt;Numeric Field&gt;, &lt;Mean&gt;, &lt;Standard Deviation&gt;, &lt;Cumulative (true/false)&gt;)</p>
        <p>Returns the standard normal distribution for a given value, a supplied distribution mean and standard deviation. Cumulative: TRUE = Cumulative Normal Distribution Function, FALSE = Normal Probability Density Function.</p>
        <p>For example – NORMDIST(Score, ( Mean(Score), All(Score)), ( STDEV(Score), All(Score) ), False ) will return the normal probability density of a given score.</p>
        <h3 class="notoc">Percentile</h3>
        <p class="code">PERCENTILE(&lt;Numeric Field&gt;, &lt;k&gt;)</p>
        <p>Returns the k-th percentile value from the given field.</p>
        <p>k is any number between 0..1 (inclusive).</p>
        <h3 class="notoc">Possion Distribution</h3>
        <p class="code">POISSONDIST( &lt;numeric value&gt;, &lt;mean&gt;, &lt;Cumulative (true/false)&gt;)</p>
        <p>Returns the poisson distribution for a given value and a supplied distribution mean. Cumulative: TRUE = Cumulative distribution function, FALSE = Probability mass function.</p>
        <p>For example – POISSONDIST( Score, ( Mean(Score), All(Score) ), ( STDEV(Score), All(Score) ), False ) will return the poisson probability density of a given number of sales</p>
        <h3 class="notoc">Quartile</h3>
        <p class="code">QUARTILE(&lt;Numeric Field&gt;, &lt;k&gt;)</p>
        <p>Returns the k-th quartile for the given field.</p>
        <ul>
            <li>k = 0 returns the Minimum value</li>
            <li>k = 1 returns the first quartile (25th percentile)</li>
            <li>k = 2 returns the Median value (50th percentile)</li>
            <li>k = 3 returns the third quartile (75th percentile)</li>
            <li>k = 4 returns the Maximum value</li>
        </ul>
        <h3 class="notoc">Rank</h3>
        <p class="code">RANK(&lt;numeric value&gt;, [DESC/ASC], [Rank Type], [&lt;group by field 1&gt;,... , &lt;group by field n&gt;])</p>
        <p>Returns the rank of a value in a list of values.</p>
        <p>[DESC/ASC] – Optional. By default sort order is descending.</p>
        <p>[Rank Type] – Optional. By default the type is standard competition ranking (“1224” ranking). Support also modified competition ranking (“1334” ranking), dense ranking (“1223” ranking) and ordinal ranking (“1234” ranking).</p>
        <p>[&lt;Group by field 1&gt;,… , &lt;Group by field n&gt;] – Optional. Rank partitions fields.</p>
        <p>For example – RANK(Total Cost, “ASC”, “1224”, Product,  Years) will return the rank of the total annual cost per each product were sorted in ascending order.</p>
        <h3 class="notoc">Running Sum (RSUM)</h3>
        <p class="code">RSUM ( &lt;numeric value&gt; ), RSUM ( &lt;numeric value&gt; , &lt;continuous&gt; )</p>
        <p>Returns the running total of the measure by the defined dimension according to the current sorting order in the widget.</p>
        <p>By default, RSUM accumulates a measure by the sorting order of the dimension. To accumulate by another order, the relevant measure should be added as an additional column and sorted.</p>
        <p>&lt;continuous&gt; is a boolean value that that accumulates the sum continuously when there are two or more dimensions. The default value is False.</p><span class="bold">Note</span>: Filtering the RSUM column by Values, filters the dimensions and recalculates the RSUM from the first filtered value.<h3 class="notoc">Skewness (Population)</h3><p class="code">SKEWP(&lt;numeric value&gt;)</p><p>Returns the skewness of the distribution of a given value in the population.</p><p>For example – SKEWP(Revenue) will return the skewness of the distribution of revenue in the population.</p><h3 class="notoc">Skewness (Sample)</h3><p class="code">SKEW(&lt;numeric value&gt;)</p><p>Returns the skewness of the distribution of a given value.</p><p>For example – SKEW(Revenue) will return the skewness of the distribution of revenue.</p><h3 class="notoc">Slope</h3><p class="code">SLOPE(&lt;field&gt;, &lt;numeric value&gt;)</p><p>Returns the slope of the linear regression line through a supplied series of x- and y- values.</p><p>For example – SLOPE(Date.Quarter, Total Sales) will return the slope of the regression line that represent the trend over quarter of the sum of sales.</p><h3 class="notoc">Standard Deviation (Population)</h3><p class="code">STDEVP( &lt;Numeric Value&gt; )</p><p>Returns the Standard Deviation of the given values (Population). Standard deviation is the square root of the average squared deviation from the mean. The standard deviation of a population gives researchers the amount of dispersion of data for an entire population of survey respondents.</p><h3 class="notoc">Standard Deviation (Sample)</h3><p class="code">STDEV( &lt;Numeric Value&gt; )</p><p>Returns the Standard Deviation of the given values (Sample).  Standard deviation is the square root of the average squared deviation from the mean. A standard deviation of a sample estimates the amount of dispersion in a given data set, based on a random sample.</p><h3 class="notoc">T Distribution</h3><p class="code">TDIST( &lt;numeric value x&gt;,&lt;degrees_freedom&gt;, &lt;Cumulative (true/false)&gt;)</p><p>Returns the student’s T-distribution for a given value and a supplied number of degrees of freedom (must be ≥ 1). Cumulative: TRUE = Cumulative Distribution Function, FALSE = Probability Density Function.</p><p>For example – TDIST( Score, 3, TRUE ) will return the student’s T-distribution of a given score, with 3 degrees of freedom.</p><h3 class="notoc">Variance (Population)</h3><p class="code">VARP( &lt;Numeric Value&gt; )</p><p>Returns the Variance of the given values (Population). Variance (Sample) is the average squared deviation from the mean, based on an entire population of survey respondents.</p><h3 class="notoc">Variance (Sample)</h3><p class="code">VAR( &lt;Numeric Value&gt; )</p><p>Returns the Variance of the given values (Sample). Variance (Sample) is the average squared deviation from the mean, based on a random sample of the population.</p><h2 class="notoc">Mathematical Functions</h2><h3 class="notoc">Absolute</h3><p class="code">Abs(&lt;Numeric value&gt;)</p><p>Returns the absolute value of the given value.</p><p>For example – ABS(Cost), where the absolute result for the value ‘2’ or ‘-2’ is ‘2’.</p><h3 class="notoc">Acos</h3><p class="code">ACOS(&lt;numeric value&gt;)</p><p>Returns the angle, in radians, whose cosine is the given numeric expression. Also referred to as arccosine.</p><p>For example – ACOS(Total Revenue) will return the angle, in radians, whose cosine is the given total revenue.</p><h3 class="notoc">Asin</h3><p class="code">ASIN(&lt;numeric value&gt;)</p><p>Returns the angle, in radians, whose sine is the given numeric expression. Also referred to as arcsine.</p><p>For example – ASIN(Total Revenue) will return the angle, in radians, whose sine is the given total revenue.</p><h3 class="notoc">Atan</h3><p class="code">ATAN(&lt;numeric value&gt;)</p><p>Returns the angle in radians whose tangent is the given numeric expression. Also referred to as arctangent.</p><p>For example – ATAN(Total Revenue) will return the angle in radians whose tangent is the given total revenue.</p><h3 class="notoc">Ceiling</h3><p class="code">CEILING(&lt;numeric value&gt;)</p><p>Returns number rounded up, away from zero, to the nearest multiple of significance.</p><p>For example – CEILING(Cost), where the result of ‘83.2’ rounded up is ’84’.</p><h3 class="notoc">Cos</h3><p class="code">COS(&lt;numeric value&gt;)</p><p>Returns the trigonometric cosine of the given angle (in radians).</p><p>For example – COS(Average Angle) will return the trigonometric cosine of the average angle.</p><h3 class="notoc">Cosh</h3><p class="code">COSH(&lt;numeric value&gt;)</p><p>Returns the hyperbolic cosine of the given value.</p><p>For example – COSH(Total Revenue) will return the hyperbolic cosine of the total revenue.</p><h3 class="notoc">Cot</h3><p class="code">COT(&lt;numeric value&gt;)</p><p>Returns the trigonometric cotangent of the given angle (in radians).</p><p>For example – COT(Average Angle) will return the trigonometric cotangent of the average angle.</p><h3 class="notoc">Exp</h3><p class="code">EXP(&lt;numeric value&gt;)</p><p>Returns the exponential value of the given value.</p><p>For example – EXP(Sales) will return the exponential value of sales.</p><h3 class="notoc">Floor</h3><p class="code">FLOOR(&lt;numeric value&gt;)</p><p>Returns number rounded down, toward zero, to the nearest multiple of ‘1’.</p><p>For example – FLOOR(Revenue), where the result of ‘88.6’ rounded down is ’88’.</p><h3 class="notoc">Ln</h3><p class="code">LN(&lt;numeric value&gt;)</p><p>Returns the base-e logarithm of the given value.</p><p>For example – LN(Cost) will return the base-e logarithm of cost.</p><h3 class="notoc">Log10</h3><p class="code">LOG10(&lt;numeric value&gt;)</p><p>Returns the base-10 logarithm of the given value.</p><p>For example – LOG10(Revenue) will return the base-10 logarithm of revenue.</p><h3 class="notoc">Mod</h3><p class="code">MOD(&lt;numeric value&gt;, divisor)</p><p>Returns the remainder after a number is divided by a divisor.</p><p>For example – MOD(Cost, 10), where the reminder of ‘255’ divided by ’10’ is ‘5’.</p><h3 class="notoc">Power</h3><p class="code">Power(value, power)</p><p>Returns the results of the given value raised to a supplied power.</p><p>For example – POWER(Revenue, 2) will return revenue raised by the power of 2.</p><h3 class="notoc">Quotient</h3><p class="code">QUOTIENT(&lt;numeric value&gt;, divisor)</p><p>Returns the integer portion of a division.</p><p>For example – QUOTIENT(Cost, 2), where the integer portion of ‘5’ divided by ‘2’ is ‘2’.</p><h3 class="notoc">Round</h3><p class="code">ROUND(&lt;numeric value&gt;, num_digits)</p><p>Returns number rounded to a specified number of digits.</p><p>For example – ROUND(Revenue, 2) will return the revenue rounded to two decimal places.</p><h3 class="notoc">Sin</h3><p class="code">SIN(&lt;numeric value&gt;)</p><p>Returns the trigonometric sine of the given angle (in radians).</p><p>For example – SIN(Average Angle) will return the trigonometric sine of the average angle.</p><h3 class="notoc">Sinh</h3><p class="code">SINH(&lt;numeric value&gt;)</p><p>Returns the hyperbolic sine of the given value.</p><p>For example – SINH(Total Revenue) will return the hyperbolic sine of the total revenue.</p><h3 class="notoc">Square root</h3><p class="code">SQRT(&lt;Numeric value&gt;)</p><p>Returns the square root of the given value.</p><p>For example – SQRT(Cost) will return the square root of cost.</p><h3 class="notoc">Sum</h3><p class="code">Sum(&lt;Numeric Field&gt;)</p><p>Calculates the total of the given values.</p><h3 class="notoc">Tan</h3><p class="code">TAN(&lt;numeric value&gt;)</p><p>Returns the trigonometric tangent of the given angle (in radians).</p><p>For example – TAN(Average Angle) will return the trigonometric tangent of the average angle.</p><h3 class="notoc">Tanh</h3><p class="code">TANH(&lt;numeric value&gt;)</p><p>Returns the hyperbolic tangent of the given value.</p><p>For example – TANH(Total Revenue) will return the hyperbolic tangent of the total revenue.</p><h2 class="notoc">Time Related Functions</h2><h3 class="notoc">Day Difference</h3><p class="code">DDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in days.</p><h3 class="notoc">Growth</h3><p class="code">Growth( &lt;Numeric Value&gt; )</p><p>Calculates growth over time. The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>Formula: (current value – compared value) / compared value.</p><p>For example:</p><ul><li>If this month your value is 12, and last month it was 10, your Growth for this month is 20% (0.2).<br />Calculation: (12 – 10) / 10 = 0.2</li><li>If this year your value is 80, and last year it was 100, your Growth for this year is -20% ( -0.2).<br />Calculation: (80 – 100) / 100 = -0.2</li></ul><h3 class="notoc">Growth Rate</h3><p class="code">GrowthRate( &lt;Numeric Value&gt; )</p><p>Calculates growth rate over time. The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>For example:</p><ul><li>If this month your value is 12, and last month it was 10, your Growth Rate for this month is 12/10 = 120% (1.2).<br />Calculation: 12 / 10 = 1.2</li><li>If this year your value is 80, and last year it was 100, your Growth for this year is 80/100 = 80% ( 0.8).<br />Calculation: 80 / 100 = 0.8</li></ul><h3 class="notoc">Hour Difference</h3><p class="code">HDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in hours.</p><h3 class="notoc">Prev</h3><p class="code">Prev( &lt;Time Field&gt; [, &lt;N&gt;] )</p><p>Returns the Time period Member in &lt;Time Field&gt; which is N periods back from the current Member. This function only works as a scope function and not by itself.</p><p>For example – This formula will return the numeric value 2 months ago:</p><p class="code">(&lt;Numeric Value&gt;, Prev(&lt;Month Field&gt;, 2))</p><h3 class="notoc">Minute Difference</h3><p class="code">MnDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in minutes.</p><h3 class="notoc">Month Difference</h3><p class="code">MDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in months. Returns whole numbers.</p><h3 class="notoc">Month to Date Average</h3><p class="code">MTDAvg( &lt;Numeric Value&gt; )</p><p>Returns the running average starting from the beginning of the month up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>Returns 0 if the active time resolution is quarters or years.</p><h3 class="notoc">Month to Date Sum</h3><p class="code">MTDSum( &lt;Numeric Value&gt; )</p><p>Returns the running total starting from the beginning of the month up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>Returns 0 if the active time resolution is quarters or years.</p><h3 class="notoc">Next</h3><p class="code">Next( &lt;Time Field&gt; [, &lt;N&gt;] )</p><p>Returns the Time period Member in &lt;Time Field&gt; which is N periods after the current Member. This function only works as a scope function and not by itself.</p><p>For example – This formula will return the numeric value 2 months ahead of now:</p><p class="code">(&lt;Numeric Value&gt;, Next(&lt;Month Field&gt;, 2)</p><h3 class="notoc">Now</h3><p class="code">Now(&lt;Day from Date field&gt;)</p><p>Returns the value for the current time period. Supports day, month, quarter or year. The Now function receives a date dimension and its level and returns all the members in that dimension which match the current query execution time.</p><b>Note</b>: This function only works as a scope function and not by itself.<p>The following example will return the value for the current day.</p><p class="code">([Total Sales], Now([Days in Datefield]))</p><h3 class="notoc">Past Year</h3><p class="code">PastYear( &lt;Numeric Value&gt; )</p><p>Calculates the value for the same period in the past (previous) year.</p><p>For example:</p><ul><li>If you’re looking at a specific day, you will see the value of the same day one year back.</li><li>If you’re looking at a specific month, you will see the value of the same month one year back.</li></ul><h3 class="notoc">Past Quarter</h3><p class="code">PastQuarter( &lt;Numeric Value&gt; )</p><p>Calculates the value for the same period in the past (previous) quarter.</p><p>For example:</p><ul><li>If you’re looking at a specific day, you will see the value of the same day one quarter back.</li><li>If you’re looking at a specific month, you will see the value of the same month one quarter back.</li></ul><h3 class="notoc">Past Month</h3><p class="code">PastMonth( &lt;Numeric Value&gt; )</p><p>Calculates the value for the same period in the past (previous) month.</p><p>For example:</p><ul><li>If you’re looking at a specific day, you will see the value of the same day one month back.</li></ul><h3 class="notoc">Quarter Difference</h3><p class="code">QDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in quarters. Returns whole numbers.</p><h3 class="notoc">Quarter to Date Average</h3><p class="code">QTDAvg( &lt;Numeric Value&gt; )</p><p>Returns the running average starting from the beginning of the quarter up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>Returns 0 if the active time resolution is years.</p><h3 class="notoc">Quarter to Date Sum</h3><p class="code">QTDSum( &lt;Numeric Value&gt; )</p><p>Returns the running total starting from the beginning of the quarter up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><p>Returns 0 if the active time resolution is years.</p><h3 class="notoc">Range</h3><p class="code">range( &lt;Field1&gt;, &lt;Field2&gt; )</p><p>Returns a graphical range selector for a data set where two members of the same dimension and level define the minimum and maximum values of the range.</p><h3 class="notoc">Second Difference</h3><p class="code">SDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in seconds.</p><h3 class="notoc">Year Difference</h3><p class="code">YDiff( &lt;Start Time&gt;, &lt;End Time&gt; )</p><p>Returns the difference between &lt;Start Time&gt; and &lt;End Time&gt; in years. Returns whole numbers.</p><h3 class="notoc">Year to Date Average</h3><p class="code">YTDAvg( &lt;Numeric Value&gt; )</p><p>Returns the running average starting from the beginning of the year up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><h3 class="notoc">Year to Date Sum</h3><p class="code">YTDSum( &lt;Numeric Value&gt; )</p><p>Returns the running total starting from the beginning of the year up to the current time period member.</p><p>The time dimension to be used is determined by the time resolution in the widget/dashboard.</p><h2 class="notoc">Other</h2><h3 class="notoc">All</h3><p class="code">All(&lt;Field&gt;)</p><p>Ignores the scope set on the dimension.</p><h3 class="notoc">Ordering</h3><p class="code">ORDERING(&lt;expression1&gt;,&lt;expression2&gt;)</p><p>Returns the numeric order position of rows sorted into ascending or descending order, breaking ties with further arguments.</p><p>The expressions must be aggregated by applying the MIN/MAX functions as in the example below:</p><p>ORDERING(MIN([Sales Person Name]), MIN([Days in Transaction_Date]), -1*Sum([Sales]))</p><h3 class="notoc">Rdouble</h3><p class="code">RDOUBLE(&lt;R expression&gt;, &lt;numeric value 1&gt;, [&lt;numeric value 2&gt;, ..., &lt;numeric value n&gt;] )</p><p>Returns a numeric result for a given R expression and a list of numeric values (use ‘args[[i]]’ in the R expression to reference numeric values parameters).</p><p>The R expression is passed to the running Rserve.</p><p>The optional ordering expression determines the order in which the rows are sent to R. The argument of the Ordering parameter can be an index in your data source or you can use the ORDERING() function to determine the order of the field. For more information about the ORDERING() function, click here.</p><p>For example – RDOUBLE(“m &lt;- log(matrix(unlist(args), ncol=2)); kmeans(m,3)$cluster”, [Total Cost], [Total Revenue]) will return the k-means cluster (R expression) of the args: [Total Cost] and [Total Revenue].</p><p class="code">RDOUBLE(&lt;recycle&gt;, &lt;R expression&gt;, &lt;numeric value 1&gt;, [&lt;numeric value 2&gt;, ..., &lt;numeric value n&gt;] )</p><p>recycle = TRUE (default) – Results will be cached for unchanged functions and data.</p><p>recycle = FALSE – Results will not be cached. Use this option if your R code contains randomality.</p><h3 class="notoc">Rint</h3><p class="code">RINT(&lt;R expression&gt;, &lt;numeric value 1&gt;, [&lt;numeric value 2&gt;, ..., &lt;numeric value n&gt;] )</p><p>Returns an integer result for a given R expression and a list of numeric values (use ‘args[[i]]’ in the R expression to reference numeric values parameters).</p><p>The R expression is passed to the running Rserve.</p><p>The optional ordering expression determines the order in which the rows are sent to R. The argument of the Ordering parameter can be an index in your data source or you can use the ORDERING() function to determine the order of the field. For more information about the ORDERING() function, click here.</p><p>For example – RINT(“m &lt;- log(matrix(unlist(args), ncol=2)); kmeans(m,3)$cluster”, [Total Cost], [Total Revenue]) will return the k-means cluster (R expression) of the args: [Total Cost] and [Total Revenue].</p><p class="code">RINT(&lt;recycle&gt;, &lt;R expression&gt;, &lt;numeric value 1&gt;, [&lt;numeric value 2&gt;, ..., &lt;numeric value n&gt;] )</p><p>recycle = TRUE (default) – Results will be cached for unchanged functions and data.</p><p>recycle = FALSE – Results will not be cached. Use this option if your R code contains randomality.</p></body>
</html>